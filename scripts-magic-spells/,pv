#!/bin/sh

exec /usr/bin/time nocache tar cpS "$@" --sort=name | pv -bratpes $(du -cks "$@" | sed -n '/.total$/ s/.total$//p')

# Examples Usage (main use-case is for piping):
# 1. from a source directory:
# ,pv files-to-copy | nocache tar xp -C /destination/directory
#
# 2. can be aliased:
# ,pv files-to-copy | ssh otherhost -c 'nocache tar xp -C /destination/directory'
#
# Notes:
# exec means that the shell script process disappears, since it's not going to do anything else.
# /usr/bin/time reports the total time (etc.) after the process is done.
# nocache makes the processes skip the filesystem cache, so copying a bunch of files doesn't push the stuff I want in the cache out.
# The -s option to pv, and the output of the following subcommand $(...) tells pv how big all of the files are in advance, so it can provide an ETA in the status output.
# For other details ... check the manpages. I don't remember.
# ref from: https://www.reddit.com/r/linux/comments/1ajslo3/comment/kp3msff/?utm_source=share&utm_medium=web2x&context=3
